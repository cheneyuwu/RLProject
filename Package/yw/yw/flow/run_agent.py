""" Active learning project

    This python script loads a trained rl policy and uses it to navigate the agent in its environment. You only need to
    provide the policy file generated by train*.py and the script will figure out which env should be used.

"""
import os
import numpy as np
import pickle

from yw.util.util import set_global_seeds
from yw.ddpg_main import config


# DDPG Package import
from yw.tool import logger


def play(policy_file, seed, num_itr, render, env_args, **kwargs):

    set_global_seeds(seed)

    # Load policy.
    with open(policy_file, "rb") as f:
        policy = pickle.load(f)

    # Prepare params.
    params = {}
    params["env_name"] = policy.info["env_name"]
    params["r_scale"] = policy.info["r_scale"]
    params["r_shift"] = policy.info["r_shift"]
    params["eps_length"] = policy.info["eps_length"] if policy.info["eps_length"] != 0 else policy.T
    params["env_args"] = dict(env_args) if env_args != None else policy.info["env_args"]
    params["rank_seed"] = seed
    params["render"] = render
    params["rollout_batch_size"] = 1
    params = config.add_env_params(params=params)
    demo = config.config_demo(params=params, policy=policy)

    # Run evaluation.
    demo.clear_history()
    for _ in range(num_itr):
        demo.generate_rollouts()

    # record logs
    for key, val in demo.logs("test"):
        logger.record_tabular(key, np.mean(val))
    logger.dump_tabular()

if __name__ == "__main__":
    import sys
    from yw.util.cmd_util import ArgParser

    ap = ArgParser()

    ap.parser.add_argument("--policy_file", help="demonstration training dataset", type=str, default=None)
    ap.parser.add_argument("--seed", help="RNG seed", type=int, default=413)
    ap.parser.add_argument("--num_itr", help="number of iterations", type=int, default=1)
    ap.parser.add_argument("--render", help="render or not", type=int, default=1)
    ap.parser.add_argument(
        "--env_arg",
        help="extra args passed to the environment",
        action="append",
        type=lambda kv: [kv.split(":")[0], eval(str(kv.split(":")[1] + '("' + kv.split(":")[2] + '")'))],
        dest="env_args",
    )
    ap.parse(sys.argv)

    play(**ap.get_dict())