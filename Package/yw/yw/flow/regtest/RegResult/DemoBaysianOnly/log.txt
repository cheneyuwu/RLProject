Logging to /home/yuchen/Desktop/RLProject/Temp/RegResult/DemoBaysianOnly/
Launching the training process with 1 cpu core(s).
Setting log level to 1.
train_ddpg_main.launch -> Using debug mode. Avoid training with too many epochs.
Using environment Reach2D with r scale down by 1.000000 shift by 0.000000 and max episode 2.000000
Training demonstration neural net to produce expected Q value.
*** q_estimator_params ***
T: 2
batch_size: 4
buffer_size: 1000000
data_size: 16
hidden: 4
input_dims: {'o': 4, 'u': 2, 'g': 2, 'info_is_success': 1}
layers: 2
lr: 0.001
max_u: 2
net_type: yw.ddpg_main.demo_policy:BaysianNN
num_sample: 1
scope: demo
test_batch_size: 4
*** q_estimator_params ***
Creating a Demonstration NN.
Imitation.__init__ -> The staging shapes are: OrderedDict([('g', (None, 2)), ('o', (None, 4)), ('u', (None, 2)), ('q', (None, 1))])
Create an Baysian NN of hidden x layer: 4 x 2.
demo_policy.BaysianNN.__init__ -> TODO
Demo.__init__ -> Global variables are: [<tf.Variable 'demo/BaysianNN/sequential/dense_reparameterization/kernel_posterior_loc:0' shape=(8, 4) dtype=float32>, <tf.Variable 'demo/BaysianNN/sequential/dense_reparameterization/kernel_posterior_untransformed_scale:0' shape=(8, 4) dtype=float32>, <tf.Variable 'demo/BaysianNN/sequential/dense_reparameterization/bias_posterior_loc:0' shape=(4,) dtype=float32>, <tf.Variable 'demo/BaysianNN/sequential/dense_reparameterization_1/kernel_posterior_loc:0' shape=(4, 4) dtype=float32>, <tf.Variable 'demo/BaysianNN/sequential/dense_reparameterization_1/kernel_posterior_untransformed_scale:0' shape=(4, 4) dtype=float32>, <tf.Variable 'demo/BaysianNN/sequential/dense_reparameterization_1/bias_posterior_loc:0' shape=(4,) dtype=float32>, <tf.Variable 'demo/BaysianNN/sequential/dense_reparameterization_2/kernel_posterior_loc:0' shape=(4, 1) dtype=float32>, <tf.Variable 'demo/BaysianNN/sequential/dense_reparameterization_2/kernel_posterior_untransformed_scale:0' shape=(4, 1) dtype=float32>, <tf.Variable 'demo/BaysianNN/sequential/dense_reparameterization_2/bias_posterior_loc:0' shape=(1,) dtype=float32>]
Demo.__init__ -> Trainable variables are: [<tf.Variable 'demo/BaysianNN/sequential/dense_reparameterization/kernel_posterior_loc:0' shape=(8, 4) dtype=float32>, <tf.Variable 'demo/BaysianNN/sequential/dense_reparameterization/kernel_posterior_untransformed_scale:0' shape=(8, 4) dtype=float32>, <tf.Variable 'demo/BaysianNN/sequential/dense_reparameterization/bias_posterior_loc:0' shape=(4,) dtype=float32>, <tf.Variable 'demo/BaysianNN/sequential/dense_reparameterization_1/kernel_posterior_loc:0' shape=(4, 4) dtype=float32>, <tf.Variable 'demo/BaysianNN/sequential/dense_reparameterization_1/kernel_posterior_untransformed_scale:0' shape=(4, 4) dtype=float32>, <tf.Variable 'demo/BaysianNN/sequential/dense_reparameterization_1/bias_posterior_loc:0' shape=(4,) dtype=float32>, <tf.Variable 'demo/BaysianNN/sequential/dense_reparameterization_2/kernel_posterior_loc:0' shape=(4, 1) dtype=float32>, <tf.Variable 'demo/BaysianNN/sequential/dense_reparameterization_2/kernel_posterior_untransformed_scale:0' shape=(4, 1) dtype=float32>, <tf.Variable 'demo/BaysianNN/sequential/dense_reparameterization_2/bias_posterior_loc:0' shape=(1,) dtype=float32>]
Adding data to the training set.
Imitator.update_dataset -> loaded set key o with shape (20, 4)
Imitator.update_dataset -> loaded set key g with shape (20, 2)
Imitator.update_dataset -> loaded set key u with shape (20, 2)
Imitator.update_dataset -> loaded set key q with shape (20, 1)
Adding data to test set.
Imitator.update_dataset -> loaded set key o with shape (20, 4)
Imitator.update_dataset -> loaded set key g with shape (20, 2)
Imitator.update_dataset -> loaded set key u with shape (20, 2)
Imitator.update_dataset -> loaded set key q with shape (20, 1)
Imitation.train -> Number of iteration:  4
Imitator.check -> Input shape:  {'o': (20, 4), 'g': (20, 2), 'u': (20, 2), 'q': (20, 1)}
Imitator.check -> Mean output shape is: (20,)
Imitator.check -> Output variance shape is: (20,)
---------------------
| epoch | 0         |
| loss  | 348.98557 |
---------------------
Saving policy to /home/yuchen/Desktop/RLProject/Temp/RegResult/DemoBaysianOnly//rl_demo_critic/policy_latest.pkl
Imitator.__getstate__ -> Members:  dict_keys(['reuse', 'scope', 'net_type', 'num_sample', 'layers', 'hidden', 'lr', 'data_size', 'batch_size', 'test_batch_size', 'T', 'max_u', 'buffer_size', 'input_dims', 'dimo', 'dimg', 'dimu', 'training_set', 'test_set', 'sess', 'input_shapes', 'input_tf', 'policy', 'grad_tf', 'adam'])
Imitator.__getstate__ -> Saved members:  dict_keys(['reuse', 'scope', 'net_type', 'num_sample', 'layers', 'hidden', 'lr', 'data_size', 'batch_size', 'test_batch_size', 'T', 'max_u', 'buffer_size', 'input_dims', 'dimo', 'dimg', 'dimu', 'input_shapes', 'tf'])
Skip RL agent training.
